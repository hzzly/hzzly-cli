#!/usr/bin/env node

// const fse = require("fs-extra");
const program = require("commander");
const path = require("path");
// const moment = require("moment");
const chalk = require("chalk");
const ora = require("ora");
const home = require("user-home");
const exists = require('fs').existsSync;
const rm = require('rimraf').sync
const inquirer = require('inquirer');
const download = require('download-git-repo')

program
  .usage("<project-name>")
  .option("-c, --clone", "use git clone")
  .option("--offline", "use cached template");

program.on("--help", () => {
  console.log("  Examples:");
  console.log();
  console.log(
    chalk.gray("    # create a new resume")
  );
  console.log("    $ hzzly_r init resume");
  console.log();
});

function help() {
  program.parse(process.argv);
  if (program.args.length < 1) return program.help();
}
help();

let tmp = program.args[0]; // init 后第一个参数
// const hasSlash = template.indexOf("/") > -1;
// const rawName = program.args[1];
const inPlace = !tmp || tmp === "."; // 是否本路经下新建项目(新建文件夹)
// const name = inPlace ? path.relative("../", process.cwd()) : rawName; // 项目名  process.cwd() 获得当前执行node命令时候的文件夹目录名
const to = path.resolve(tmp || "."); // 创建的项目绝对目录
const clone = program.clone || false;

// const tmp = path.join(home, ".vue-templates", template.replace(/\//g, "-"));

// console.log(to);
if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      downloadAndGenerate('hzzly/xyy-vue', tmp)
    }
  }).catch()
} else {
  downloadAndGenerate('hzzly/xyy-vue', tmp)
}

// console.log(chalk.red(template));
// console.log(chalk.red(hasSlash));
// console.log(chalk.red(rawName));
// console.log(chalk.red(inPlace));
// console.log(chalk.red(name));
// console.log(chalk.red(to));
// console.log(chalk.red(clone));
// console.log(chalk.red(tmp));
// console.log(chalk.red(home));

// module.exports = function(dir) {
//   dir = dir || ".";

//   // let tplDir = path.resolve(__dirname, "..", "tpl");
//   // fse.copySync(tplDir, path.resolve(dir));
//   // fse.ensureDirSync(path.resolve(dir, "source", "_extra"));
//   console.log(chalk.red(`${dir}: ${moment().format('YYYY-MM-DD,HH:mm:ss')}`));
// };


function downloadAndGenerate(template, tmp) {
  const spinner = ora("downloading template");
  spinner.start();
  // Remove if local template exists
  if (exists(tmp)) rm(tmp);
  download(template, tmp, { clone }, err => {
    spinner.stop();
    if (err) {
      console.error(
        chalk.red(
        "Failed to download repo " + template + ": " + err.message.trim()
        )
      );
      process.exit(1)
    }
    console.log(`To get started:\n\n  cd ${tmp}\n  npm install\n  npm run dev\n\nDocumentation can be found at https://github.com/hzzly`);
  });
}


// saveAsImage: function () {
//   let resume = document.querySelector('.resume')
//   html2canvas(resume).then(function (canvas) {
//     canvas.toBlob(function (blob) {
//       FileSaver.saveAs(blob, 'Resume.png')
//     })
//   })
// }